import os
import subprocess
import concurrent.futures
from tqdm import tqdm


def execute_command(args):
    command, ip_address = args
    try:
        full_command = f"{command} {ip_address}"
        result = subprocess.check_output(full_command, shell=True, stderr=subprocess.STDOUT)
        return command, ip_address, result.decode('utf-8')
    except subprocess.CalledProcessError as e:
        return command, ip_address, str(e.output.decode('utf-8'))


def process_commands_with_progress(commands, ip_file):
    command_list = commands.split(',')
    with open(ip_file, 'r') as f:
        ip_addresses = f.read().splitlines()

    num_ips = len(ip_addresses)
    args_list = [(command, ip) for ip in ip_addresses for command in command_list]

    with concurrent.futures.ThreadPoolExecutor() as thread_executor, concurrent.futures.ProcessPoolExecutor() as process_executor:
        futures = [thread_executor.submit(execute_command, args) for args in args_list]
        results = list(tqdm(concurrent.futures.as_completed(futures), total=num_ips * len(command_list), desc="Executing commands"))

    # Save results to separate files for each command
    for command in command_list:
        with open(f"{command}_output.txt", 'w') as f:
            for future in results:
                cmd, ip, result = future.result()
                if cmd == command:
                    f.write(f"Command: {cmd} {ip}\nResult:\n{result}\n")


def main():
    ip_file = input("Enter the filename/path for the IP addresses file: ")

    # Define the list of commands directly in the code
    command_list = [
        "nmap -Pn --script smb-os-discovery",
        "nmap -Pn --script smb2-security-mode",
        "nmap -Pn --script ssl-enum-ciphers"
    ]

    print("\nAvailable commands:")
    for i, command in enumerate(command_list, start=1):
        print(f"{i}. {command}")

    selected_commands = input("Enter the numbers of the commands to run (separated by commas): ")
    selected_commands_list = selected_commands.split(',')

    selected_commands = [command_list[int(cmd) - 1] for cmd in selected_commands_list if 1 <= int(cmd) <= len(command_list)]

    process_commands_with_progress(",".join(selected_commands), ip_file)


if __name__ == "__main__":
    main()
